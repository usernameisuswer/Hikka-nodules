# meta developer: @mm_mods
# requires: toml
import os
from hikka import loader, utils
import pickle
from telethon.tl.types import Channel
import toml


# noinspection PyCallingNonCallable
@loader.tds
class RPMod(loader.Module):
    """A little upgraded mod of module of @trololo_1."""

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "action_decoration",
                'normal | –±–µ–∑ —Å—Ç–∏–ª–µ–π',
                lambda: self.strings("cfg_action_decoration"),
                validator=loader.validators.Choice(
                    [
                        "normal | –±–µ–∑ —Å—Ç–∏–ª–µ–π",
                        "bold | –ø–æ–ª—É–∂–∏—Ä–Ω—ã–π",
                        "italic | –∫—É—Ä—Å–∏–≤",
                        "underlined | –ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π",
                        "strikethrough | –∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π",
                        "spoiler | —Å–∫—Ä—ã—Ç—ã–π",
                    ]
                ),
            ),

            loader.ConfigValue(
                "replica_decoration",
                'normal | –±–µ–∑ —Å—Ç–∏–ª–µ–π',
                lambda: self.strings("cfg_replica_decoration"),
                validator=loader.validators.Choice(
                    [
                        "normal | –±–µ–∑ —Å—Ç–∏–ª–µ–π",
                        "bold | –ø–æ–ª—É–∂–∏—Ä–Ω—ã–π",
                        "italic | –∫—É—Ä—Å–∏–≤",
                        "underlined | –ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π",
                        "strikethrough | –∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π",
                        "spoiler | —Å–∫—Ä—ã—Ç—ã–π",
                    ]
                ),
            ),

            loader.ConfigValue(
                "speech_bubble",
                'üí¨',
                lambda: self.strings("cfg_speech_bubble"),
                validator=loader.validators.String()
            )
        )

    strings = {
        'name': 'LiMERPMod',
        'separator‚Ä¶': 'ü§ê <b>Here\'s an emoji separator, but no emoji. eh</b>',
        'name?': 'üßê <b>Where\'s the name of the RP command?</b>',
        'action?': 'üßê <b>Where\'s the action of the RP command?</b>',
        'aarf': 'ü§¢ <b>RP commands can\'t be named "all"</b>',
        'space': 'ü§ê <b>RP commands consisting of multiple words aren\'t supported.</b>',
        'added1': "ü§© <b>Command '<code>{}</code>' succesfully added with emoji '{}'!</b>",
        'added2': "‚ò∫Ô∏è <b>Command '<code>{}</code>' succesfully added!</b>",
        'weresall': 'ü§ê <b>You\'ve not entered separator or have\'nt entered anything at all.</b>',
        'cleared': 'üçÉ <b>RP commands succesfully cleared!</b>',
        'arg?': 'üßê <b>Where\'s the argument?</b>',
        'deleted': 'üóëÔ∏è <b>RP command <code>{}</code> succesfully deleted!</b>',
        'notfound': 'üßê <b>Command <code>{}</code> not found!</b>',
        'on': 'üòÄ <b>RP commands are now on!</b>',
        'off': 'üò¥ <b>RP commands are now off!</b>',
        's-t-wrong': 'üòü <b>Something went wrong!</b>',
        'nick-changed': 'üè∑Ô∏è <b>RP nickname of {} succesfully changed to <code>{}</code>!</b>',
        'count': 'üìã <b>You have <code>{}</code> commands</b>',
        'error-with-type': '‚ùå <b>Error: <code>{}</code></b>',
        'actualised': 'üëçüèª <b>RP commands succesfully actualised!</b>',
        'chat-excluded': '‚ûñ <b>Chat {} succesfully excluded!</b>',
        'chat-included': '‚ûï <b>Chat {} succesfully included!</b>',
        'id-wrong': 'üî¢ <b>Wrong ID!</b>',
        'empty-exclude': 'ü™Å <b>Excluded chats list is empty!</b>',
        'excluded-chats': 'üìÉ <b>Excluded chats:</b>',
        'on-in-chat': 'üìóüí¨ <b>RP commands are now on for members of this chat!</b>',
        'off-in-chat': 'üìïüí¨ <b>RP commands are now off for members of this chat!</b>',
        'who-have': 'üìÑ <b>Who have RP commands access:</b>',
        'chats-s': 'üí¨ <b>Chats:</b>',
        'users-s': 'üë§ <b>Users:</b>',
        'on-for-usr': 'üìó <b>RP commands are now on for <code>{}</code>!</b>',
        'off-for-usr': 'üìï <b>RP commands are now off for <code>{}</code>!</b>',
        'whatschanged': '''üçã <b>LIME</b> (1.2) ‚Äî mod of RPMod (@trololo_1) by @mm_mods
What\'s changed?
    ‚Ä¢ No limits now!
    ‚Ä¢ No check for emoji validity now ‚Äî add custom emojies‚Ä¶
    ‚Ä¢ No buggy import now, everyone can use the module.
    ‚Ä¢ Additions and replicas now save there\'s case.
    ‚Ä¢ New commands backup format.
    ‚Ä¢ Config optoins moved to config.
Enjoy!''',
        'with-replica': 'Saying:',
        'arg-unknown': 'ü§åüèª <b>Unknown argument!</b>',
        'num-unknown': '‚ìÇÔ∏è <b>Unknown number!</b>',
        'done': '‚úÖ <b>Done!</b>',
        'less-then-2': '‚ñ´Ô∏è <b>Less then 2 arguments!</b>',
        'toml-minparse-failure': 'üò¶ <b>Failed to parse toml!</b>\nAre you sure it\'s a backup?',
        'toml-parse-failure': 'üíÄ <b>Failed to parse toml!</b>\nThe backup is corrupted.',
        'cfg_action_decoration': 'Decoration for RP action',
        'cfg_replica_decoration': 'Decoration for RP replica',
        'cfg_speech_bubble': 'Speech bubble emoji for ¬´with replica¬ª',
    }

    strings_ru = {
        'name': 'LiMERPMod',
        'separator‚Ä¶': 'ü§ê <b>–í–æ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –Ω–æ –Ω–µ—Ç —ç–º–æ–¥–∑–∏. –µ–ø—Ç</b>',
        'name?': 'üßê <b>–ì–¥–µ –∏–º—è –†–ü-–∫–æ–º–∞–Ω–¥—ã?</b>',
        'action?': 'üßê <b>–ì–¥–µ –¥–µ–π—Å—Ç–≤–∏–µ –†–ü-–∫–æ–º–∞–Ω–¥—ã?</b>',
        'aarf': 'ü§¢ <b>–†–ü-–∫–æ–º–∞–Ω–¥—ã –Ω–µ –º–æ–≥—É—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è "all"</b>',
        'space': 'ü§ê <b>–ú–Ω–æ–≥–æ—Å–ª–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.</b>',
        'added1': "ü§© <b>–ö–æ–º–∞–Ω–¥–∞ '<code>{}</code>' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å —ç–º–æ–¥–∑–∏ '{}'!</b>",
        'added2': "‚ò∫Ô∏è <b>–ö–æ–º–∞–Ω–¥–∞ '<code>{}</code>' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>",
        'weresall': 'ü§ê <b>–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∏–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏ –≤–æ–æ–±—â–µ.</b>',
        'cleared': 'üçÉ <b>–†–ü-–∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!</b>',
        'arg?': 'üßê <b>–ì–¥–µ –∞—Ä–≥—É–º–µ–Ω—Ç?</b>',
        'deleted': 'üóëÔ∏è <b>–†–ü-–∫–æ–º–∞–Ω–¥–∞ <code>{}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!</b>',
        'notfound': 'üßê <b>–ö–æ–º–∞–Ω–¥–∞ <code>{}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!</b>',
        'on': 'üòÄ <b>–†–ü-–∫–æ–º–∞–Ω–¥—ã —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–µ–Ω—ã!</b>',
        'off': 'üò¥ <b>–†–ü-–∫–æ–º–∞–Ω–¥—ã —Ç–µ–ø–µ—Ä—å –≤—ã–∫–ª—é—á–µ–Ω—ã!</b>',
        's-t-wrong': 'üòü <b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!</b>',
        'nick-changed': 'üè∑Ô∏è <b>–ù–∏–∫ {} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <code>{}</code>!</b>',
        'count': 'üìã <b>–£ –≤–∞—Å <code>{}</code> –∫–æ–º–∞–Ω–¥</b>',
        'error-with-type': '‚ùå <b>–û—à–∏–±–∫–∞: <code>{}</code></b>',
        'actualised': 'üëçüèª <b>–†–ü-–∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>',
        'chat-excluded': '‚ûñ <b>–ß–∞—Ç {} —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω!</b>',
        'chat-included': '‚ûï <b>–ß–∞—Ç {} —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω!</b>',
        'id-wrong': 'üî¢ <b>–ù–µ–≤–µ—Ä–Ω—ã–π ID!</b>',
        'empty-exclude': 'ü™Å <b>–°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø—É—Å—Ç!</b>',
        'excluded-chats': 'üìÉ <b>–ò—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ —á–∞—Ç—ã:</b>',
        'on-in-chat': 'üìóüí¨ <b>–†–ü-–∫–æ–º–∞–Ω–¥—ã —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞!</b>',
        'off-in-chat': 'üìïüí¨ <b>–†–ü-–∫–æ–º–∞–Ω–¥—ã —Ç–µ–ø–µ—Ä—å –≤—ã–∫–ª—é—á–µ–Ω—ã –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞!</b>',
        'who-have': 'üìÑ <b>–ö—Ç–æ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –†–ü-–∫–æ–º–∞–Ω–¥–∞–º:</b>',
        'chats-s': 'üí¨ <b>–ß–∞—Ç—ã:</b>',
        'users-s': 'üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>',
        'on-for-usr': 'üìó <b>–†–ü-–∫–æ–º–∞–Ω–¥—ã —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è <code>{}</code>!</b>',
        'off-for-usr': 'üìï <b>–†–ü-–∫–æ–º–∞–Ω–¥—ã —Ç–µ–ø–µ—Ä—å –≤—ã–∫–ª—é—á–µ–Ω—ã –¥–ª—è <code>{}</code>!</b>',
        'whatschanged': '''üçã <b>LIME</b> (1.2) ‚Äî –º–æ–¥—É–ª—å RPMod (@trololo_1) –æ—Ç @mm_mods
–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å?
    ‚Ä¢ –ë–æ–ª—å—à–µ –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!
    ‚Ä¢ –ë–æ–ª—å—à–µ –Ω–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —ç–º–æ–¥–∑–∏ ‚Äî –¥–æ–±–∞–≤–ª—è–π—Ç–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏‚Ä¶
    ‚Ä¢ –ë–æ–ª—å—à–µ –Ω–µ—Ç –±–∞–≥–æ–≤ —Å –∏–º–ø–æ—Ä—Ç–æ–º ‚Äî —Ç–µ–ø–µ—Ä—å –º–æ–¥—É–ª—å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π.
    ‚Ä¢ –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —Ä–µ–ø–ª–∏–∫–∏ —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è—é—Ç —Å–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä.
    ‚Ä¢ –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥.
    ‚Ä¢ –û–ø—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞ –ø–µ—Ä–µ–µ—Ö–∞–ª–∏ –≤ –∫–æ–Ω—Ñ–∏–≥.
–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å!''',
        'with-replica': '–° —Ä–µ–ø–ª–∏–∫–æ–π:',
        'arg-unknown': 'ü§åüèª <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç!</b>',
        'num-unknown': '‚ìÇÔ∏è <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–∏—Ñ—Ä–∞!</b>',
        'done': '‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>',
        'less-then-2': '‚ñ´Ô∏è <b>–ú–µ–Ω—å—à–µ 2 –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!</b>',
        'toml-minparse-failure': 'üò¶ <b>–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ toml!</b>\n–≠—Ç–æ —Ç–æ—á–Ω–æ –±—ç–∫–∞–ø?',
        'toml-parse-failure': 'üíÄ <b>–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ toml!</b>\n–ë—ç–∫–∞–ø –ø–æ–≤—Ä–µ–∂–¥—ë–Ω.',
        'cfg_action_decoration': '–î–µ–∫–æ—Ä–∞—Ü–∏—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è –†–ü-–∫–æ–º–∞–Ω–¥—ã',
        'cfg_replica_decoration': '–î–µ–∫–æ—Ä–∞—Ü–∏—è –¥–ª—è —Ä–µ–ø–ª–∏–∫–∏ –†–ü-–∫–æ–º–∞–Ω–¥—ã',
        'cfg_speech_bubble': '–≠–º–æ–¥–∑–∏ —Ä–µ—á–µ–≤–æ–≥–æ –ø—É–∑—ã—Ä—è –¥–ª—è ¬´—Å —Ä–µ–ø–ª–∏–∫–æ–π¬ª',
        '_cls_doc': '–°–ª–µ–≥–∫–∞ —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–¥ –Ω–∞ –º–æ–¥—É–ª—å –æ—Ç @trololo_1.',
        '_cmd_doc_dobrp': '–°–æ–∑–¥–∞—Ç—å –†–ü-–∫–æ–º–∞–Ω–¥—É. –ê—Ä–≥—É–º–µ–Ω—Ç—ã: <–∫–æ–º–∞–Ω–¥–∞>/<–¥–µ–π—Å—Ç–≤–∏–µ>[/<—ç–º–æ–¥–∑–∏>]',
        '_cmd_doc_addrp': '–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è .dobrp.',
        '_cmd_doc_delrp': '–£–¥–∞–ª–∏—Ç—å –†–ü-–∫–æ–º–∞–Ω–¥—É. –ê—Ä–≥—É–º–µ–Ω—Ç—ã: <–∫–æ–º–∞–Ω–¥–∞>',
        '_cmd_doc_rplist': '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –†–ü-–∫–æ–º–∞–Ω–¥.',
        '_cmd_doc_rpconf': '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è –†–ü-–∫–æ–º–∞–Ω–¥. –ê—Ä–≥—É–º–µ–Ω—Ç—ã: <–ø–∞—Ä–∞–º–µ—Ç—Ä> <–∑–Ω–∞—á–µ–Ω–∏–µ>',
        '_cmd_doc_orpback': '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å/–∑–∞–≥—Ä—É–∑–∏—Ç—å –†–ü-–∫–æ–º–∞–Ω–¥—ã (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã '
                            '—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –∏–ª–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å.',
        '_cmd_doc_rpback': '–ù–æ–≤—ã–π –º–µ—Ç–æ–¥, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/–∑–∞–≥—Ä—É–∑–∏—Ç—å –†–ü-–∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã '
                            '—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –∏–ª–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å.',
        '_cmd_doc_rpnick': '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –¥–ª—è –†–ü-–∫–æ–º–∞–Ω–¥. –ê—Ä–≥—É–º–µ–Ω—Ç—ã: <–Ω–∏–∫> –∏–ª–∏ –±–µ–∑ –Ω–∏–∫–∞, —á—Ç–æ–±—ã –µ–≥–æ —Å–±—Ä–æ—Å–∏—Ç—å. '
                           '–í –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
        '_cmd_doc_rpnicks': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .rpnicks, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∏–∫–æ–≤ –¥–ª—è –†–ü-–∫–æ–º–∞–Ω–¥.',
        '_cmd_doc_rpblock': '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –†–ü-–∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ. –ê—Ä–≥—É–º–µ–Ω—Ç—ã: <–∞–π–¥–∏ —á–∞—Ç–∞>. '
                            '–ú–æ–∂–Ω–æ –∏ –±–µ–∑ –Ω–µ–≥–æ, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.',
        '_cmd_doc_rptoggle': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .rptoggle, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –†–ü-–º–æ–¥.',
        '_cmd_doc_useraccept': '–î–æ–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—á–∞—Ç –∫ –†–ü-–∫–æ–º–∞–Ω–¥–∞–º. –ê—Ä–≥—É–º–µ–Ω—Ç—ã: <–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—á–∞—Ç–∞>. '
                               '–ú–æ–∂–Ω–æ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞, —Ç–æ–≥–¥–∞ –¥–µ–π—Å—Ç–≤–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞–¥ —Ç–µ–∫—É—â–∏–º —á–∞—Ç–æ–º. '
                               '–ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞, —Ç–æ–≥–¥–∞ –¥–µ–π—Å—Ç–≤–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑ '
                               '–æ—Ç–≤–µ—Ç–∞. –ï—Å–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å -l (–ª), —Ç–æ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ –¥–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/—á–∞—Ç–æ–≤.',
        '_cmd_doc_mmminfo': '–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ.',
    }

    async def client_ready(self, client, db):
        self.db = db

        if not self.db.get("RPMod", "exlist", False):
            self.db.set("RPMod", "exlist", [])

        if not self.db.get("RPMod", "status", False):
            self.db.get("RPMod", "status", 1)

        if not self.db.get("RPMod", "rpnicks", False):
            self.db.set("RPMod", "rpnicks", {})

        if not self.db.get("RPMod", "rpcomands", False):
            self.db.set("RPMod", "rpcomands", {})

        if not self.db.get("RPMod", "rpemoji", False):
            self.db.set("RPMod", "rpemoji", {})

        if not self.db.get("RPMod", "nrpcommands", False):
            # Check if the old version of the module is installed
            if self.db.get("RPMod", "rpcomands", False):
                # Copy the dict
                commands_old = self.db.get("RPMod", "rpcomands")
                emoji_old = self.db.get("RPMod", "rpemoji")
                # Create a new dict
                commands_new = {}
                # For each key in the old dict try to find the emoji in the old dict and add as second element of list
                for key in commands_old:
                    try:
                        commands_new[key] = [commands_old[key], emoji_old[key]]
                    except KeyError:
                        commands_new[key] = [commands_old[key], '']

                # Save the new dict
                self.db.set("RPMod", "nrpcommands", commands_new)

            else:
                # If the old version of the module is not installed, create an empty dict
                self.db.set("RPMod", "nrpcommands", {})

        if not self.db.get("RPMod", "useraccept", False):
            self.db.set("RPMod", "useraccept", {"chats": [], "users": []})

        elif isinstance(type(self.db.get("RPMod", "useraccept")), list):
            self.db.set(
                "RPMod",
                "useraccept",
                {"chats": [], "users": self.db.get("RPMod", "useraccept")},
            )

    async def dobrpcmd(self, message):
        """Use: .dobrp (command) / (action) / (emoji) to add command. You can do it without emoji."""
        args = utils.get_args_raw(message)
        dict_rp = self.db.get("RPMod", "nrpcommands")

        try:
            key_rp = str(args.split("/")[0]).strip().casefold()
            value_rp = str(args.split("/", maxsplit=2)[1]).strip()
            lenght_args = args.split("/")
            count_emoji = 0

            if ' ' in key_rp:
                await utils.answer(message, self.strings("space"))
                return

            if len(lenght_args) >= 3:
                emoji_rp = str(message.text.split("/", maxsplit=2)[2]).strip()
                count_emoji = 1

                if not emoji_rp or not emoji_rp.strip():
                    await utils.answer(
                        message, self.strings("separator‚Ä¶")
                    )
                    return

            if not key_rp or not key_rp.strip():
                return await utils.answer(message, self.strings("name?"))

            elif not value_rp or not value_rp.strip():
                return await utils.answer(
                    message, self.strings("action")
                )

            elif key_rp == "all":
                return await utils.answer(
                    message, self.strings("aarf"),
                )

            elif count_emoji == 1:
                dict_rp[key_rp] = [value_rp, emoji_rp]
                self.db.set("RPMod", "nrpcommands", dict_rp)
                await utils.answer(
                    message,
                    self.strings("added1").format(key_rp, emoji_rp),
                )

            else:
                dict_rp[key_rp] = [value_rp, '']
                self.db.set("RPMod", "nrpcommands", dict_rp)
                await utils.answer(
                    message,
                    self.strings("added2").format(key_rp),
                )

        except Exception:
            await utils.answer(
                message, self.strings("weresall"),
            )

    async def addrpcmd(self, message):
        """dobrp alias."""
        await self.dobrpcmd(message)

    async def delrpcmd(self, message):
        """Use: .delrp (command) to delete command.
Use: .delrp all to delete all commands."""
        dict_rp = self.db.get("RPMod", "nrpcommands")

        args = utils.get_args_raw(message)
        key_rp = str(args)

        if key_rp == "all":
            dict_rp.clear()
            self.db.set("RPMod", "nrpcommands", dict_rp)
            await utils.answer(message, self.strings("cleared"))
            return

        elif not key_rp or not key_rp.strip():
            await utils.answer(message, self.strings("name?"))

        else:
            try:
                dict_rp.pop(key_rp)
                self.db.set("RPMod", "nrpcommands", dict_rp)

                await utils.answer(
                    message, self.strings("deleted").format(key_rp),
                )

            except KeyError:
                await utils.answer(message, self.strings("notfound"))

    async def rptogglecmd(self, message):
        """Use: .rptoggle to turn on/off RP mode."""
        status = self.db.get("RPMod", "status")

        if status == 1:
            self.db.set("RPMod", "status", 2)
            await utils.answer(message, self.strings("off"))

        else:
            self.db.set("RPMod", "status", 1)
            await utils.answer(message, self.strings("on"))

    async def rplistcmd(self, message):
        """Use: .rplist to see list of RP commands."""
        com = self.db.get("RPMod", "nrpcommands")

        coms_amount = len(com)
        com_list = self.strings("count").format(coms_amount)

        if len(com) == 0:
            await utils.answer(message, self.strings("count").format(coms_amount))
            return

        for i in com:
            if com[i][1] != '':
                com_list += f"\n‚Ä¢ <b><code>{i}</code> - {com[i][0]} |</b> {com[i][1]}"
            else:
                com_list += f"\n‚Ä¢ <b><code>{i}</code> - {com[i][0]}</b>"

        await utils.answer(message, com_list)

    async def rpnickcmd(self, message):
        """Use: .rpnick (nick) to change nick to user or yourself."""
        args = utils.get_args_raw(message).strip()
        reply = await message.get_reply_message()
        nicks = self.db.get("RPMod", "rpnicks")

        if not reply:
            user = await message.client.get_entity(message.sender_id)
        else:
            user = await message.client.get_entity(reply.sender_id)

        if not args:
            if str(user.id) in nicks:
                nicks.pop(str(user.id))

            self.db.set("RPMod", "rpnicks", nicks)
            return await utils.answer(
                message,
                self.strings("nick-changed").format(user.id, user.first_name),
            )

        nicks[str(user.id)] = args
        self.db.set("RPMod", "rpnicks", nicks)
        await utils.answer(
            message,
            self.strings("nick-changed").format(user.id, args),
        )

    async def rpnickscmd(self, message):
        """Use: .rpnicks to see list of nicknames."""
        nicks = self.db.get("RPMod", "rpnicks")

        if len(nicks) == 0:
            return await utils.answer(message, self.strings("no-nicks"))

        str_nicks = "‚Ä¢ " + "\n ‚Ä¢".join(
            " --- ".join([f"<code>{user_id}</code>", f"<b>{nick}</b>"])
            for user_id, nick in nicks.items()
        )
        await utils.answer(message, str_nicks)

    async def orpbackcmd(self, message):
        """Backup RP commands (old fashioned method).
Use as reply to file with commands to load them or use without
arguments to back up them."""
        commands = self.db.get("RPMod", "nrpcommands")
        file_name = "LiMERPModBackUp (on compat).pickle"
        mes_id = message.to_id

        reply = await message.get_reply_message()

        if not reply:
            # Split them into 2 dicts
            emojies = {}
            for key, value in commands.items():
                if commands[key][1] != "":
                    emojies[key] = commands[key][1]
                commands[key] = commands[key][0]

            try:
                await message.delete()
                dict_all = {"rp": commands, "emj": emojies}

                with open(file_name, "wb") as f:
                    pickle.dump(dict_all, f)

                await message.client.send_file(mes_id, file_name)
                os.remove(file_name)

            except Exception as e:
                await utils.answer(message, f"<b>–û—à–∏–±–∫–∞:\n</b>{e}")

        else:
            try:
                if not reply.document:
                    await utils.answer(message, self.strings("itsnotafile"))
                await reply.download_media(file_name)

                with open(file_name, "rb") as f:
                    data = pickle.load(f)

                rp = data["rp"]
                emj = data["emj"]

                # Iterating through keys
                for key in rp.keys():
                    if key in emj.keys():
                        rp[key] = [rp[key], emj[key]]

                self.db.set("RPMod", "nrpcommands", rp)

                await utils.answer(message, self.strings("actualised"))

            except Exception as e:
                await utils.answer(message, self.strings("error-with-type").format(e))

    async def rpbackcmd(self, message):
        """New way to backup RP commands. Use as reply to file with commands to load them or use without arguments to back up them."""
        commands = self.db.get("RPMod", "nrpcommands")
        file_name = "LiMERPModBackUp.toml"
        mes_id = message.to_id

        reply = await message.get_reply_message()

        if not reply:
            # Dump it into toml
            try:
                await message.delete()
                with open(file_name, "w") as f:
                 