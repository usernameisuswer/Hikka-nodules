from hikkatl.types import Message
from .. import loader , utils 
import logging
from g4f.client import Client 

# requires: g4f
# meta developer:@DieModules (@ytkanelox)

logging.basicConfig(level=logging.INFO)

@loader.tds
class G4FModule(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π g4f"""
    strings = {"name": "G4FModule"}

    async def gptcmd(self, message: Message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ GPT-4 –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
        request = message.raw_text.split(maxsplit=1)[1] if len(message.raw_text.split(maxsplit=1)) > 1 else "–ü—Ä–∏–≤–µ—Ç!"
        await utils.answer(message, "<emoji document_id=5334904192622403796>ü´•</emoji> –ü–æ–ª—É—á–∞—é –æ—Ç–≤–µ—Ç...")
        response = await self.request_event(request)
        formatted_response = f"<emoji document_id=5199682846729449178>üß†</emoji> –û—Ç–≤–µ—Ç: {response}\n <emoji document_id=5328239124933515868>‚öôÔ∏è</emoji> –∑–∞–ø—Ä–æ—Å: {request}"
        await message.edit(formatted_response)

    async def request_event(self, request: str) -> str:
        '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç GPT-4'''
        client = Client()
        try:
            response = client.chat.completions.create(
                model="gpt-4",
                messages=[{
                    "role": "user", "content": request
                }]
            )
            return response.choices[0].message.content
        except Exception as e:
            logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"