# meta developer:@DieModules

from .. import loader, utils
from telethon.tl.custom import Message
import time

@loader.tds
class FinanceModule(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤"""
    strings = {
        "name": "FinanceModule",
        "balance": "<b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {}",
        "income_added": "<emoji document_id=5393360308133699762>‚úÖ</emoji> <b>–î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω:</b> {}",
        "expense_added": "<emoji document_id=5393360308133699762>‚úÖ</emoji> <b>–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω:</b> {}",
        "invalid_amount": "<emoji document_id=5393110903677790336>‚ùé</emoji> <b>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.</b>",
        "insufficient_funds": "<b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.</b>",
        "actions": "<b>–ò—Å—Ç–æ—Ä–∏—è —Å—á–µ—Ç–∞:</b>\n{}"
    }

    async def client_ready(self, client, db):
        self.db = db
        self.db.set(self.strings["name"], "history", [])

    async def balancecmd(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å"""
        balance = self.db.get(self.strings["name"], "balance", 0)
        await utils.answer(message, self.strings["balance"].format(balance))

    async def incomecmd(self, message: Message):
        """–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥: .income —Å—É–º–º–∞"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["invalid_amount"])
            return
        try:
            amount = float(args)
        except ValueError:
            await utils.answer(message, self.strings["invalid_amount"])
            return
        balance = self.db.get(self.strings["name"], "balance", 0)
        balance += amount
        self.db.set(self.strings["name"], "balance", balance)
        history = self.db.get(self.strings["name"], "history", [])
        history.append(f"<emoji document_id=5373001317042101552>üìà</emoji> <b>–î–æ—Ö–æ–¥—ã</b>:\n{time.strftime('%Y-%m-%d %H:%M:%S')} +{amount}")
        self.db.set(self.strings["name"], "history", history)
        await utils.answer(message, self.strings["income_added"].format(amount))

    async def expensecmd(self, message: Message):
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥: .expense —Å—É–º–º–∞"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["invalid_amount"])
            return
        try:
            amount = float(args)
        except ValueError:
            await utils.answer(message, self.strings["invalid_amount"])
            return
        balance = self.db.get(self.strings["name"], "balance", 0)
        if balance - amount < 0:
            await utils.answer(message, self.strings["insufficient_funds"])
            return
        balance -= amount
        self.db.set(self.strings["name"], "balance", balance)
        history = self.db.get(self.strings["name"], "history", [])
        history.append(f"<emoji document_id=5361748661640372834>üìâ</emoji> <b>–†–∞—Å—Ö–æ–¥—ã:</b>\n{time.strftime('%Y-%m-%d %H:%M:%S')} -{amount}")
        self.db.set(self.strings["name"], "history", history)
        await utils.answer(message, self.strings["expense_added"].format(amount))

    async def actionscmd(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        history = self.db.get(self.strings["name"], "history", [])
        actions_str = "\n".join(history) if history else "–ò—Å—Ç–æ—Ä–∏—è —Å—á–µ—Ç–∞ –ø—É—Å—Ç–∞."
        await utils.answer(message, self.strings["actions"].format(actions_str))
        